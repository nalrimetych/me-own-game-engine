#version 330 core
in vec3 fnormagl;
in vec3 fpos;
in vec2 texCoords;
out vec4 color;



struct material {
	sampler2D texture_diffuse1;
	sampler2D texture_specular1;
	sampler2D texture_normal1;

	sampler2D texture_diffuse2;
	sampler2D texture_specular2;
	sampler2D texture_normal2;

	float shininess;	
};

struct DirLight {
	vec3 direction;

	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};

struct PointLight {
	vec3 position;

	float constant;
	float linear;
	float quadratic;

	vec3 ambient;
	vec3 diffuse;
	vec3 specular;	
};


uniform int nr_light;



uniform vec3 cameraPos;
uniform material matInUse;
uniform DirLight dirLight;
uniform PointLight pointLights[1];

vec3 calcDirLight(DirLight light, vec3 normal, vec3 viewDir);
vec3 calcPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir);


vec3 texturbek;

#define COMMON_TEX_DIFFUSE mix(texture(matInUse.texture_diffuse1, texCoords), texture(matInUse.texture_diffuse2, texCoords), 0.5f)
#define COMMON_TEX_SPECULAR mix(texture(matInUse.texture_specular1, texCoords), texture(matInUse.texture_specular2, texCoords), 0.5f)
#define COMMON_TEX_NORMAL mix(texture(matInUse.texture_normal1, texCoords), texture(matInUse.texture_normal2, texCoords), 0.5f)

void main()
{	

	vec3 norm = normalize(texture(matInUse.texture_normal1, texCoords).xyz * 2.0f - 1.0f);
	vec3 viewDir = normalize(cameraPos - fpos);

	vec3 result = calcDirLight(dirLight, norm, viewDir);

	for(int i=0; i < nr_light; i++)
		result += calcPointLight(pointLights[i], norm, fpos, viewDir);

	color = vec4(result, 1.0f);
	
}



////////////////////////////////////////////////////////////////////////////////////////////////////////



vec3 calcDirLight(DirLight light, vec3 normal, vec3 viewDir) {
	vec3 lightDir = normalize(-light.direction);

	float diff = max(dot(normal, lightDir), 0.0f);

	vec3 reflectDir = reflect(-lightDir, normal);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0f), matInUse.shininess);

	vec3 ambient  = light.ambient * vec3(texture(matInUse.texture_diffuse1, texCoords));
	vec3 diffuse  = light.diffuse * diff * vec3(texture(matInUse.texture_diffuse1, texCoords));
	vec3 specular = light.specular * spec * vec3(texture(matInUse.texture_specular1, texCoords));

	return (ambient + diffuse + specular);
}

vec3 calcPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir) {
	vec3 lightDir = normalize(light.position - fragPos);

	float diff = max(dot(normal, lightDir), 0.0f);

	vec3 reflectDir = reflect(-lightDir, normal);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0f), matInUse.shininess);

	float distance    = length(light.position - fragPos);
	float attenuation = 1.0f / (light.constant + light.linear * distance + light.quadratic * (distance * distance));

	vec3 ambient  = light.ambient  * vec3(texture(matInUse.texture_diffuse1, texCoords));
	vec3 diffuse  = light.diffuse  * diff * vec3(texture(matInUse.texture_diffuse1, texCoords));
	vec3 specular = light.specular * spec * vec3(texture(matInUse.texture_specular1, texCoords));
	
	ambient  *= attenuation;
	diffuse  *= attenuation;
	specular *= attenuation;

	return (ambient + diffuse + specular);
}